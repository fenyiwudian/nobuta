// 即使只有一个入口，也要使用babel-transform-runtime来减少重复的注入代码
// 以为loader是在处理打个文件的时候注入代码的，同一个功能被在不同的单个文件中使用是，每个文件中
// 都会被打入代码实体，导致这个代码实体被打入多次。
// webpack处理的时候，不知道这几个代码实体是同一个东西，所以出现了代码重复，bundle的size会变大
// 如果使用的babel-transform-runtime则注入的不是实体代码，而是依赖描述符
// webpack处理的时候，通过依赖描述符就能知道哪些是只想同样的代码，多个同样的依赖描述符的代码只会注入一次
// 这样就减少了bundle的size
// 参照babel的配置文件，主要要在babel-transform-runtime的插件配置中配置好最新的@babel/runtime版本
// 否则默认使用7.0beta版，有些功能无法被抽成依赖描述符。
import './a';
import './b';
import './c';
// 如果有多个webpack的构建入口，则以上做法还不够，
// 以上的做法只能使得同一个构建入口的各个依赖模块之间共享注入代码
// 而各个入口之间，仍然是隔离的，而且会重复注入代码
// 如果你的各个构建入口生成的文件，目的就是为了完全分开使用，则不需要额外的处理也可以
// 否则还可以配置webpack的optimization.splitChunks来让各个入口也共享注入代码
// 从而达到减小各个入口的bundle的size的效果。